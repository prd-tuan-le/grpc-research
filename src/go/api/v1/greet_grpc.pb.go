// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: api/v1/greet.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GreeterServiceClient is the client API for GreeterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GreeterServiceClient interface {
	// Unary
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error)
	// Server Streaming
	ParrotSaysHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (GreeterService_ParrotSaysHelloClient, error)
	// Client Streaming
	ChattyClientSaysHello(ctx context.Context, opts ...grpc.CallOption) (GreeterService_ChattyClientSaysHelloClient, error)
	// Both Streaming
	InteractingHello(ctx context.Context, opts ...grpc.CallOption) (GreeterService_InteractingHelloClient, error)
}

type greeterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGreeterServiceClient(cc grpc.ClientConnInterface) GreeterServiceClient {
	return &greeterServiceClient{cc}
}

func (c *greeterServiceClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error) {
	out := new(HelloResponse)
	err := c.cc.Invoke(ctx, "/api.v1.GreeterService/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterServiceClient) ParrotSaysHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (GreeterService_ParrotSaysHelloClient, error) {
	stream, err := c.cc.NewStream(ctx, &GreeterService_ServiceDesc.Streams[0], "/api.v1.GreeterService/ParrotSaysHello", opts...)
	if err != nil {
		return nil, err
	}
	x := &greeterServiceParrotSaysHelloClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GreeterService_ParrotSaysHelloClient interface {
	Recv() (*HelloResponse, error)
	grpc.ClientStream
}

type greeterServiceParrotSaysHelloClient struct {
	grpc.ClientStream
}

func (x *greeterServiceParrotSaysHelloClient) Recv() (*HelloResponse, error) {
	m := new(HelloResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *greeterServiceClient) ChattyClientSaysHello(ctx context.Context, opts ...grpc.CallOption) (GreeterService_ChattyClientSaysHelloClient, error) {
	stream, err := c.cc.NewStream(ctx, &GreeterService_ServiceDesc.Streams[1], "/api.v1.GreeterService/ChattyClientSaysHello", opts...)
	if err != nil {
		return nil, err
	}
	x := &greeterServiceChattyClientSaysHelloClient{stream}
	return x, nil
}

type GreeterService_ChattyClientSaysHelloClient interface {
	Send(*HelloRequest) error
	CloseAndRecv() (*DelayedReply, error)
	grpc.ClientStream
}

type greeterServiceChattyClientSaysHelloClient struct {
	grpc.ClientStream
}

func (x *greeterServiceChattyClientSaysHelloClient) Send(m *HelloRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *greeterServiceChattyClientSaysHelloClient) CloseAndRecv() (*DelayedReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(DelayedReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *greeterServiceClient) InteractingHello(ctx context.Context, opts ...grpc.CallOption) (GreeterService_InteractingHelloClient, error) {
	stream, err := c.cc.NewStream(ctx, &GreeterService_ServiceDesc.Streams[2], "/api.v1.GreeterService/InteractingHello", opts...)
	if err != nil {
		return nil, err
	}
	x := &greeterServiceInteractingHelloClient{stream}
	return x, nil
}

type GreeterService_InteractingHelloClient interface {
	Send(*HelloRequest) error
	Recv() (*HelloResponse, error)
	grpc.ClientStream
}

type greeterServiceInteractingHelloClient struct {
	grpc.ClientStream
}

func (x *greeterServiceInteractingHelloClient) Send(m *HelloRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *greeterServiceInteractingHelloClient) Recv() (*HelloResponse, error) {
	m := new(HelloResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GreeterServiceServer is the server API for GreeterService service.
// All implementations should embed UnimplementedGreeterServiceServer
// for forward compatibility
type GreeterServiceServer interface {
	// Unary
	SayHello(context.Context, *HelloRequest) (*HelloResponse, error)
	// Server Streaming
	ParrotSaysHello(*HelloRequest, GreeterService_ParrotSaysHelloServer) error
	// Client Streaming
	ChattyClientSaysHello(GreeterService_ChattyClientSaysHelloServer) error
	// Both Streaming
	InteractingHello(GreeterService_InteractingHelloServer) error
}

// UnimplementedGreeterServiceServer should be embedded to have forward compatible implementations.
type UnimplementedGreeterServiceServer struct {
}

func (UnimplementedGreeterServiceServer) SayHello(context.Context, *HelloRequest) (*HelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedGreeterServiceServer) ParrotSaysHello(*HelloRequest, GreeterService_ParrotSaysHelloServer) error {
	return status.Errorf(codes.Unimplemented, "method ParrotSaysHello not implemented")
}
func (UnimplementedGreeterServiceServer) ChattyClientSaysHello(GreeterService_ChattyClientSaysHelloServer) error {
	return status.Errorf(codes.Unimplemented, "method ChattyClientSaysHello not implemented")
}
func (UnimplementedGreeterServiceServer) InteractingHello(GreeterService_InteractingHelloServer) error {
	return status.Errorf(codes.Unimplemented, "method InteractingHello not implemented")
}

// UnsafeGreeterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GreeterServiceServer will
// result in compilation errors.
type UnsafeGreeterServiceServer interface {
	mustEmbedUnimplementedGreeterServiceServer()
}

func RegisterGreeterServiceServer(s grpc.ServiceRegistrar, srv GreeterServiceServer) {
	s.RegisterService(&GreeterService_ServiceDesc, srv)
}

func _GreeterService_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServiceServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.GreeterService/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServiceServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GreeterService_ParrotSaysHello_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(HelloRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GreeterServiceServer).ParrotSaysHello(m, &greeterServiceParrotSaysHelloServer{stream})
}

type GreeterService_ParrotSaysHelloServer interface {
	Send(*HelloResponse) error
	grpc.ServerStream
}

type greeterServiceParrotSaysHelloServer struct {
	grpc.ServerStream
}

func (x *greeterServiceParrotSaysHelloServer) Send(m *HelloResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _GreeterService_ChattyClientSaysHello_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GreeterServiceServer).ChattyClientSaysHello(&greeterServiceChattyClientSaysHelloServer{stream})
}

type GreeterService_ChattyClientSaysHelloServer interface {
	SendAndClose(*DelayedReply) error
	Recv() (*HelloRequest, error)
	grpc.ServerStream
}

type greeterServiceChattyClientSaysHelloServer struct {
	grpc.ServerStream
}

func (x *greeterServiceChattyClientSaysHelloServer) SendAndClose(m *DelayedReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *greeterServiceChattyClientSaysHelloServer) Recv() (*HelloRequest, error) {
	m := new(HelloRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GreeterService_InteractingHello_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GreeterServiceServer).InteractingHello(&greeterServiceInteractingHelloServer{stream})
}

type GreeterService_InteractingHelloServer interface {
	Send(*HelloResponse) error
	Recv() (*HelloRequest, error)
	grpc.ServerStream
}

type greeterServiceInteractingHelloServer struct {
	grpc.ServerStream
}

func (x *greeterServiceInteractingHelloServer) Send(m *HelloResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *greeterServiceInteractingHelloServer) Recv() (*HelloRequest, error) {
	m := new(HelloRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GreeterService_ServiceDesc is the grpc.ServiceDesc for GreeterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GreeterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.GreeterService",
	HandlerType: (*GreeterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _GreeterService_SayHello_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ParrotSaysHello",
			Handler:       _GreeterService_ParrotSaysHello_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ChattyClientSaysHello",
			Handler:       _GreeterService_ChattyClientSaysHello_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "InteractingHello",
			Handler:       _GreeterService_InteractingHello_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api/v1/greet.proto",
}
